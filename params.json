{"name":"Ide","tagline":"Ide is the Injector of Dependencies for the Enterprise","body":"Ide (Injector of Dependencies for the Enterprise) is a revolutionary new [Dependency Injection](en.wikipedia.org/wiki/Dependency_injection) framework.\r\n\r\nCompared to the [many](http://en.wikipedia.org/wiki/Spring_Framework) [other](http://www.ninject.org/) [Dependency](http://square.github.com/dagger/) [Injection](http://code.google.com/p/google-guice/) [frameworks](http://picocontainer.codehaus.org/), Ide is extremely terse: the entire framework is only [one line of code](https://github.com/nusco/ide/blob/master/ide.rb).\r\n\r\n# Features\r\n\r\n* Externalized configuration\r\n* Programmable Dependency Resolution\r\n* Instance factories (\"classes\")\r\n* Enterprise-level robustness\r\n* Very lightweight source code\r\n* Written in Pure Ruby\r\n\r\n# How to use Ide\r\n\r\nTo install, copy the [*ide.rb*](https://github.com/nusco/ide/blob/master/ide.rb) file into your project.\r\n\r\nNow, assume that you have a class that depends on other classes. For example, this *WeatherScraper* depends on *WeatherService* and *Database*:\r\n\r\n    class WeatherScraper\r\n      def initialize\r\n        @weather_service = WeatherService.new(\"http://onlineweatherforall.com\")\r\n        @database = Database.new\r\n      end\r\n    \r\n      # a lot of code\r\n    end\r\n\r\nWhen you run with the \"testing\" configuration, you'd like *WeatherScraper* to use two specific implementations of *WeatherService* and *Database*, called *MockWeatherService* and *TestDatabase*. To define dependencies, create a file named *dependencies_testing* that contains this configuration code:\r\n\r\n    WeatherService = MockWeatherService\r\n    Database       = TestDatabase\r\n\r\nAt the beginning of your program, load the framework and initialize dependencies like this:\r\n\r\n    require 'ide'\r\n    load_dependencies('testing')\r\n  \r\nNow the *WeatherService* class will use the dependencies you defined. If you want another configuration (say, \"production\"), you can write a file named *dependencies_production*:\r\n\r\n    WeatherService = RealOnlineWeatherService\r\n    Database       = BigAssDatabase\r\n\r\n# Programmable Dependency Resolution\r\n\r\nIn some cases, defining your dependencies in a static file is not enough - you want to apply programmatic logic to decide which concrete implementation to depend upon. With another Dependency Injection framework, this could prove hard. In Ide, you can customize your object factories (also known as \"classes\") by overriding their *new()* method:\r\n\r\n    class TestDatabase\r\n      def self.new()\r\n        if functional_testing()\r\n          return in_memory_database\r\n        else\r\n          return mock_database\r\n        end\r\n      end\r\n    end\r\n\r\n[Enjoy Ide](http://en.wikipedia.org/wiki/Ide_%28fish%29)!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}